////////////////////////////////////////////////////////////////////////////////
// Filename: Texture.ps
////////////////////////////////////////////////////////////////////////////////

/////////////
// GLOBALS //
/////////////
cbuffer TextureBuffer
{
	float sigma;
	float k;
	float p;
	float e;
	float phi;
	float3 padding;
};


Texture2D Texture1;
Texture2D Texture2;
SamplerState SampleType;


//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
};

////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 TexturePixelShader(PixelInputType input) : SV_TARGET
{
	float2 d1 = Texture1.Sample(SampleType, input.tex).ra;
	float2 d2 = Texture2.Sample(SampleType, input.tex).ra;
	float2 h = 100.0 * ((1.0 + p) * d1 - p * d2);
	float2 edge = smoothstep(0.0, e, phi*h);
	return float4(edge.x, edge.x, edge.x, edge.y);
}