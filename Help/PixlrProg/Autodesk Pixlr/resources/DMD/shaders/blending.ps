////////////////////////////////////////////////////////////////////////////////
// Filename: blending.ps
////////////////////////////////////////////////////////////////////////////////

/////////////
// GLOBALS //
/////////////

Texture2D shaderTexture; //Background
Texture2D shaderTexture1; //Foreground
Texture2D maskingTexture;
SamplerState SampleType;


/////////////
// GLOBALS //
/////////////
cbuffer TextureBuffer
{
	int blendmode;
	float alpha;
	float amount;
	float padding;
};

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
};

/// <summary>
/// Blend the source and destination pixels.
/// This function does not precompute alpha channels. To learn more about the equations that
/// factor in alpha blending, see http://www.w3.org/TR/2009/WD-SVGCompositing-20090430/.
/// <summary>
/// <param name="src">Source (foreground) pixel.</param>
/// <param name="dst">Destination (background) pixel.</param>
/// <returns>The blended pixel.</returns>
float4 blend (in float4 src, in float4 dst, in int blendmode, in float alpha)
{	
	if(blendmode == 0) // Dst over
	{
		return float4(dst.rgb, alpha) * alpha + src * (1.0 - alpha);
	}
	else if(blendmode == 1) //Add
	{
		return float4((src + dst).rgb, alpha) * alpha + dst * (1.0 - alpha);
	}
	else if(blendmode == 2) //Multiply
	{
		return src * dst * alpha + dst * (1.0 - alpha);
	}
	else if(blendmode == 3) //Screen
	{
		return ((src + dst) - (src * dst)) * alpha + dst * (1.0 - alpha); 
	}
	else if(blendmode == 7) //Softlight
	{	
		float value1;
		if(src.x <= 0.5)
		{
			value1 = dst.x - (1.0 - 2.0 * src.x) * dst.x * (1.0 - dst.x);
		}
		else
		{
			if((src.x > 0.5) && (dst.x <= 0.25))
			{
				value1 = dst.x + (2.0 * src.x - 1.0) * (4.0 * dst.x * (4.0 * dst.x + 1.0) * (dst.x - 1.0) + 7.0 * dst.x);
			}
			else
			{
				value1 = (dst.x + (2.0 * src.x - 1.0) * (sqrt(dst.x) - dst.x));
			}
		}
		float value2;
		if(src.y <= 0.5)
		{
			value2 = dst.y - (1.0 - 2.0 * src.y) * dst.y * (1.0 - dst.y);
		}
		else
		{
			if((src.y > 0.5) && (dst.y <= 0.25))
			{
				value2 = dst.y + (2.0 * src.y - 1.0) * (4.0 * dst.y * (4.0 * dst.y + 1.0) * (dst.y - 1.0) + 7.0 * dst.y);
			}
			else
			{
				value2 = dst.y + (2.0 * src.y - 1.0) * (sqrt(dst.y) - dst.y);
			}
		}
		float value3;
		if(src.z <= 0.5)
		{
			value3 = dst.z - (1.0 - 2.0 * src.z) * dst.z * (1.0 - dst.z);
		}
		else
		{
			if((src.z > 0.5) && (dst.z <= 0.25))
			{
				value3 = dst.z + (2.0 * src.z - 1.0) * (4.0 * dst.z * (4.0 * dst.z + 1.0) * (dst.z - 1.0) + 7.0 * dst.z);
			}
			else
			{
				value3 = dst.z + (2.0 * src.z - 1.0) * (sqrt(dst.z) - dst.z);
			}
		}
		
		float3 value = float3(value1, value2, value3);	
		return float4(value, alpha) * alpha + dst * (1.0 - alpha);
	}
	else if(blendmode == 11) //Substract
    {
        return float4((src - dst).rgb, alpha) * alpha + dst * (1.0 - alpha);
    }
    else if(blendmode == 12){ //special hardlight for liquify

		if (abs(src.x) + abs(src.y - 0.50) + abs(src.z - 0.50) < 0.01) return float4(dst.xyz, alpha);

        if(src.r  == dst.r && src.g == dst.g && src.b == dst.b){
            return dst;
        }
        else{
            float3 value = float3((src.x <= 0.5) ? (2.0 * src.x * dst.x) : (1.0 - 2.0 * (1.0 - src.x) * (1.0 - dst.x)),
                        (src.y <= 0.5) ? (2.0 * src.y * dst.y) : (1.0 - 2.0 * (1.0 - src.y) * (1.0 - dst.y)),
                        (src.z <= 0.5) ? (2.0 * src.z * dst.z) : (1.0 - 2.0 * (1.0 - src.z) * (1.0 - dst.z)));
            return float4(value, alpha);
        }

    }
	else if(blendmode == 13) // color burn
	{
		float3 value = dst.rgb;
		if(src.a != 0.0)
		{
		    value = float3((src.x == 0.0) ? 0.0 : (1.0 - ((1.0 - dst.x) / src.x)),
			(src.y == 0.0) ? 0.0 : (1.0 - ((1.0 - dst.y) / src.y)),
			(src.z == 0.0) ? 0.0 : (1.0 - ((1.0 - dst.z) / src.z)));
		}

		return float4(value, alpha);
	}
	else if(blendmode == 14) // color dodge
	{
		float3 value = float3((src.x == 1.0) ? 1.0 : min(1.0, dst.x / (1.0 - src.x)),
			(src.y == 1.0) ? 1.0 : min(1.0, dst.y / (1.0 - src.y)),
			(src.z == 1.0) ? 1.0 : min(1.0, dst.z / (1.0 - src.z)));

		return float4(value, alpha);
	}
	
	return src;
}

////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 TexturePixelShader(PixelInputType input) : SV_TARGET
{
    // Sample the pixel color from the texture using the sampler at this texture coordinate location.
    float4 dst = shaderTexture.Sample(SampleType, input.tex);
	float4 src = shaderTexture1.Sample(SampleType, input.tex);

	if(blendmode == 0) //Normal or Layer
	{
		return lerp(dst, src, src.a);
	}
	else if(blendmode == 9)
	{
		src.a *= alpha;
		
		return lerp(dst, src, src.a); //opacity
	}
	else if(blendmode == 10){
		float4 colorMask = maskingTexture.Sample(SampleType, input.tex);
		return dst * colorMask + src * (1.0 - colorMask);
	}
	else
	{
		src.a *= alpha;
		// Apply blend operation
		
		float4 colour = float4(0.0, 0.0, 0.0, 0.0);
		
		if(blendmode == 4) //darken
		{
			colour = min(src + (1.0 - src.a) * dst, dst + (1.0 - dst.a) * src);
		}
		else if(blendmode == 8) //Hardlight
		{
			float3 value = float3((src.x <= 0.50) ? (2.0 * src.x * dst.x) : (1.0 - 2.0 * (1.0 - src.x) * (1.0 - dst.x)),
				(src.y <= 0.50) ? (2.0 * src.y * dst.y) : (1.0 - 2.0 * (1.0 - src.y) * (1.0 - dst.y)),
				(src.z <= 0.50) ? (2.0 * src.z * dst.z) : (1.0 - 2.0 * (1.0 - src.z) * (1.0 - dst.z)));
			
			colour = float4(value, src.a) * src.a + dst * (1.0 - src.a);
		}
		else if(blendmode == 6) //Overlay
		{
			float3 value = float3((dst.x <= 0.5) ? (2.0 * src.x * dst.x) : (1.0 - 2.0 * (1.0 - dst.x) * (1.0 - src.x)),
				(dst.y <= 0.5) ? (2.0 * src.y * dst.y) : (1.0 - 2.0 * (1.0 - dst.y) * (1.0 - src.y)),
				(dst.z <= 0.5) ? (2.0 * src.z * dst.z) : (1.0 - 2.0 * (1.0 - dst.z) * (1.0 - src.z)));
		
			colour = float4(value, src.a) * src.a + dst * (1.0 - src.a);
		}
		else if(blendmode == 5) //Lighten
		{
			colour = float4(max(dst, src).rgb, src.a) * src.a + dst * (1.0 - src.a);
		}
		else
		{
			colour = clamp(blend(src, dst, blendmode, src.a), 0.0, 1.0);
		}
		colour = clamp(colour, 0.0, 1.0);

		// Set fragment
		return float4(lerp(dst, colour, amount).rgb, 1.0);
	}
}
