////////////////////////////////////////////////////////////////////////////////
// Filename: paletteMap.ps
////////////////////////////////////////////////////////////////////////////////

/////////////
// GLOBALS //
/////////////
cbuffer TextureBuffer
{
	int uMode;
	float3 padding;
};


Texture2D shaderTexture;
Texture2D redTexture;
Texture2D greenTexture;
Texture2D blueTexture;
SamplerState SampleType;

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
};

////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 TexturePixelShader(PixelInputType input) : SV_TARGET
{
	float4 color;
    // Sample the pixel color from the texture using the sampler at this texture coordinate location.
    color = shaderTexture.Sample(SampleType, input.tex);

	//for premultiplied image
	if(color.a != 0.0)	color.rgb /= color.a;

	float4 finalColor;

	if(uMode == 0)
	{
		float2 indexRed = float2(color.r, 0.0);
		float4 redColor = redTexture.Sample(SampleType, indexRed);
    
		float2 indexGreen = float2(color.g, 0.0);
		float4 greenColor = greenTexture.Sample(SampleType, indexGreen);
    
		float2 indexBlue = float2(color.b, 0.0);
		float4 blueColor = blueTexture.Sample(SampleType, indexBlue);

		finalColor = float4(redColor.r, greenColor.g, blueColor.b, color.a);
	}
	else if(uMode == 1)
	{
		float2 indexRed = float2(color.r, 0.0);
		float4 redColor = redTexture.Sample(SampleType, indexRed);

		float2 indexGreen = float2(color.g, 0.0);
		float4 greenColor = greenTexture.Sample(SampleType, indexGreen);

		finalColor = float4(redColor.r, greenColor.g, color.b, color.a);
	}
	else if(uMode == 2)
	{
		float2 indexRed = float2(color.r, 0.0);
		float4 redColor = redTexture.Sample(SampleType, indexRed);

		float2 indexBlue = float2(color.b, 0.0);
		float4 blueColor = blueTexture.Sample(SampleType, indexBlue);

		finalColor = float4(redColor.r, color.g, blueColor.b, color.a);
	}
	else if(uMode == 3)
	{
		float2 indexGreen = float2(color.g, 0.0);
		float4 greenColor = greenTexture.Sample(SampleType, indexGreen);

		float2 indexBlue = float2(color.b, 0.0);
		float4 blueColor = blueTexture.Sample(SampleType, indexBlue);

		finalColor = float4(color.r, greenColor.g, blueColor.b, color.a);
	}
	else if(uMode == 4)
	{
		float2 indexRed = float2(color.r, 0.0);
		float4 redColor = redTexture.Sample(SampleType, indexRed);

		finalColor = float4(redColor.r, color.g, color.b, color.a);
	}
	else if(uMode == 5)
	{
		float2 indexGreen = float2(color.g, 0.0);
		float4 greenColor = greenTexture.Sample(SampleType, indexGreen);

		finalColor = float4(color.r, greenColor.g, color.b, color.a);
	}
	else if(uMode == 6)
	{
		float2 indexBlue = float2(color.b, 0.0);
		float4 blueColor = blueTexture.Sample(SampleType, indexBlue);

		finalColor = float4(color.r, color.g, blueColor.b, color.a);
	}
	else
		finalColor = color;

	//for premultiplied image
	finalColor.rgb *= finalColor.a;

	return finalColor;
}
