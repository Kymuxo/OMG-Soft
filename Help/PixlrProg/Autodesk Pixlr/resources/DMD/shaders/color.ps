////////////////////////////////////////////////////////////////////////////////
// Filename: Texture.ps
////////////////////////////////////////////////////////////////////////////////

/////////////
// GLOBALS //
/////////////
cbuffer TextureBuffer
{
	float uHue;
	float uSaturation;
	float uVibrance;
	float uBrightness;
	float uWarmth;
	float3 padding;
};


Texture2D shaderTexture;
SamplerState SampleType;


//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
};


// sRGB working space, D50 reference white
// See http://www.brucelindbloom.com/Eqn_RGB_XYZ_Matrix.html

float3x3 mRGBtoXYZ = float3x3(
    0.4360747, 0.2225045, 0.0139322,
    0.3850649, 0.7168786, 0.0971045,
    0.1430804, 0.0606169, 0.7141733
);

float3x3 mXYZtoRGB = float3x3(
    3.1338561, -0.9787684, 0.0719453,
    -1.6168667, 1.9161415, -0.2289914,
    -0.4906146, 0.0334540, 1.4052427
);


// Bradford method for Chromatic Adaptation
// See http://www.brucelindbloom.com/Eqn_ChromAdapt.html

float3x3 mBradford = float3x3(
    0.8951000, -0.7502000, 0.0389000,
    0.2664000, 1.7135000, -0.0685000,
    -0.1614000, 0.0367000, 1.0296000
);

float3x3 mBradfordInv = float3x3(
    0.9869929, 0.4323053, -0.0085287,
    -0.1470543, 0.5183603, 0.0400428,
    0.1599627, 0.0492912, 0.9684867
);

float Luminance(float3 c) {
    return dot(c, float3(0.299, 0.587, 0.114));
}

/*

The following function is adapted from GPUImage

https://github.com/BradLarson/GPUImage

Copyright (c) 2012, Brad Larson, Ben Cochran, Hugues Lismonde, Keitaroh Kobayashi, Alaric Cole, Matthew Clark, Jacob Gundersen, Chris Williams.
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
Neither the name of the GPUImage framework nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/

float3 ClipColor(float3 c) {
    float l = Luminance(c);
    float n = min(min(c.r, c.g), c.b);
    float x = max(max(c.r, c.g), c.b);
    
    if (n < 0.0) {
        c.r = l + ((c.r - l) * l) / (l - n);
        c.g = l + ((c.g - l) * l) / (l - n);
        c.b = l + ((c.b - l) * l) / (l - n);
    }
    if (x > 1.0) {
        c.r = l + ((c.r - l) * (1.0 - l)) / (x - l);
        c.g = l + ((c.g - l) * (1.0 - l)) / (x - l);
        c.b = l + ((c.b - l) * (1.0 - l)) / (x - l);
    }
 
    return c;
 }



////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 TexturePixelShader(PixelInputType input) : SV_TARGET
{
	float4 textureColor;
    // Sample the pixel color from the texture using the sampler at this texture coordinate location.
    textureColor = shaderTexture.Sample(SampleType, input.tex);


	float angle = uHue * 3.14159265;
    float s = sin(angle), c = cos(angle);
    float3 weights = (float3(2.0 * c, -sqrt(3.0) * s - c, sqrt(3.0) * s - c) + 1.0) / 3.0;
    float len = length(textureColor.rgb);
    textureColor.rgb = float3(
        dot(textureColor.rgb, weights.xyz),
        dot(textureColor.rgb, weights.zxy),
        dot(textureColor.rgb, weights.yzx));

	textureColor.rgb = clamp(textureColor.rgb, 0.0, 1.0);

    float average = (textureColor.r + textureColor.g + textureColor.b) / 3.0;

    float luminance = Luminance(textureColor.rgb);
    
    float saturation = uSaturation;

    if (saturation > 0.0) {
        saturation = saturation * 0.5;
        textureColor.rgb += (luminance - textureColor.rgb) * (1.0 - 1.0 / (1.001 - saturation));
    } else {
        textureColor.rgb += (luminance - textureColor.rgb) * (-saturation);
    }

	textureColor.rgb = clamp(textureColor.rgb, 0.0, 1.0);
    
    luminance = Luminance(textureColor.rgb);

    
    float mn = min(min(textureColor.r, textureColor.g), textureColor.b);
    float mx = max(max(textureColor.r, textureColor.g), textureColor.b);
    float invsat = pow(1.0 - (mx - mn), 2.0);

    textureColor.rgb = lerp(float3(luminance, luminance, luminance), textureColor.rgb, uVibrance * invsat + 1.0);

    float3 refWhiteTo;
    float3 refWhiteFrom = float3(1.0, 1.0, 1.0);

    /*if (uWarmth > 0.0) {
        refWhiteTo = lerp(float3(1.0, 1.0, 1.0), float3(0.8, 0.8, 0.2), uWarmth * 0.75);
    } else {
        refWhiteTo = lerp(float3(1.0, 1.0, 1.0), float3(0.1, 0.2, 0.8), -uWarmth * 0.75);
    }

    float3x1 crSrc = mBradford * refWhiteFrom;
    float3x1 crDst = mBradford * refWhiteTo;

    float3x3 mcr = float3x3(
        crDst.x / crSrc.x, 0.0, 0.0,
        0.0, crDst.y / crSrc.y, 0.0,
        0.0, 0.0, crDst.z / crSrc.z
    );

    float3x3 mChromatic = mBradfordInv * mcr * mBradford;

    float3 xyz = mChromatic * (mRGBtoXYZ * textureColor.rgb);
    float3 rgb = mXYZtoRGB * xyz;

    float oldLuminance = Luminance(textureColor.rgb);
    float newLuminance = Luminance(rgb);

    rgb += float3(oldLuminance) - float3(newLuminance);
    rgb = ClipColor(rgb);*/

	if(textureColor.a != 0.0)
	{
		textureColor.rgb += uBrightness;
	}

    return textureColor;
}
