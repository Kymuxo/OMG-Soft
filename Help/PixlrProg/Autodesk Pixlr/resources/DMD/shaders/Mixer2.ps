////////////////////////////////////////////////////////////////////////////////
// Filename: Texture.ps
////////////////////////////////////////////////////////////////////////////////

/////////////
// GLOBALS //
/////////////
cbuffer TextureBuffer
{
    float4 Global_tileRegion;
	float2 tile_scale;
	float intensity;
	float padding;
};


Texture2D Texture1;
Texture2D Texture2;
SamplerState SampleType;


//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
};

float2 tile2World(float2 tpos)
{
	float2 pos = Global_tileRegion.xy + tpos.xy * Global_tileRegion.zw;
	return pos;
}

float2 world2tile(float2 wpos)
{
	float2 pos = (wpos - Global_tileRegion.xy) / (Global_tileRegion.zw);
	return pos;
}
////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 TexturePixelShader(PixelInputType input) : SV_TARGET
{
	float3 color = float3(0.0, 0.0, 0.0);

    float4 ic = Texture1.Sample(SampleType, input.tex);

	float2 tc = tile2World(input.tex) * tile_scale;
	float tone = Texture2.Sample(SampleType, tc).r;

	float lum = dot(ic.rgb, float3(0.299, .587, 0.114));
	tone *= intensity;

	float3 oc = float3(1.0, 1.0, 1.0);
	if (lum < tone)
	{
		oc = color;
	}
	
	return float4(oc, ic.a);
}
